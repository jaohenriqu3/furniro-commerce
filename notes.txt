LINKS:

JWT nest: https://docs.nestjs.com/security/authentication
 
Prisma: https://blog.rocketseat.com.br/prisma-uma-das-melhores-coisa-que-ja-aconteceu-no-ecossistema/
 
Prisma + postgres: https://www.prisma.io/docs/orm/overview/databases/postgresql
 
Extensão prisma vscode: https://www.prisma.io/blog/vscode-extension-prisma-rust-webassembly
 
Comandos docker-compose: https://docs.docker.com/reference/cli/docker/compose/
 
Comandos docker: https://www.geeksforgeeks.org/docker-instruction-commands/


COMANDS:

docker ps 
docker-compose up 
docker-compose up -d 
docker logs 

npx prisma migrate dev --name init 
npx prisma studio 
npx prisma generate 


function Home() {
    return(
        <>


        </>
    )
} 

Porta 5432: Usada pelo PostgreSQL dentro do contêiner Docker. É a porta padrão para o PostgreSQL e onde o Prisma Client se conecta para acessar o banco de dados.
Porta 5555: Usada pelo Prisma Client para acessar a aplicação e o banco de dados.
Porta 3001: Usada pelo servidor da API para escutar requisições HTTP e servir os dados para o front-end. 


import NavBar from './components/nav/navbar'; 
import SignupPage from './pages/sing-up/sing-up';
import Home from './pages/Home/home';
import LoginPage from './pages/log-in/log-in';

function RouterLinks() {
  return ( 
    <BrowserRouter> 
    <Router>
      <Routes>
        <Route path="/" element={<Home/>} />
        <Route path="./pages/sing-up/sing-up" element={<SignupPage />} />
      </Routes>
    </Router> 
    </BrowserRouter>
  )
}
export con




server.js: 

const http = require('http');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

const server = http.createServer(async (req, res) => {
  if (req.method === 'GET' && req.url.startsWith('/api/products')) {
    const id = req.url.split('/').pop(); // Pega o ID da URL

    try {
      if (id) {
        const product = await prisma.product.findUnique({ where: { id: parseInt(id, 10) } });
        if (product) {
          res.writeHead(200, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify(product));
        } else {
          res.writeHead(404, { 'Content-Type': 'text/plain' });
          res.end('Product not found');
        }
      } else {
        const products = await prisma.product.findMany();
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(products));
      }
    } catch (error) {
      res.writeHead(500, { 'Content-Type': 'text/plain' });
      res.end('Internal Server Error');
    }
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(3001, () => {
  console.log('API server running on http://localhost:3001');
});